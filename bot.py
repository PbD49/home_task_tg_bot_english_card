import configparser
import random

import telebot
from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton, ReplyKeyboardMarkup
from class_db import DataBase, username, password
from translate_words import translate_text_rus_to_eng

db = DataBase('english_db', user=username, password=password, host='127.0.0.1', port='5432')

config = configparser.ConfigParser()
config.read("settings.ini")

username = config["name"]["username"]
password = config["password"]["password"]
token = config["token"]["token"]


class StartBot:
    """
    –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –∫–ª–∞—Å—Å –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞.

    :param token: –¢–æ–∫–µ–Ω –¥–ª—è API —Ç–µ–ª–µ–≥—Ä–∞–º.
    –ú–µ—Ç–æ–¥—ã
    -------
    init(token)
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç StartBot —Å —Ç–æ–∫–µ–Ω–æ–º.
    start_handler(message)
    send_message_with_buttons(self, message, text)
    """
    def __init__(self, token):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞.

        :param token: –¢–æ–∫–µ–Ω –±–æ—Ç–∞ –¥–ª—è API Telegram.
        """
        self.bot = telebot.TeleBot(token)

        @self.bot.message_handler(commands=['start'])
        def start_handler(message):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã '/start'.

            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "/start" –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.

            :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            """
            photo = open('1.jpeg', 'rb')
            self.bot.send_photo(message.chat.id, photo)
            text = ('''–ü—Ä–∏–≤–µ—Ç! –Ø —Ç–≤–æ–π —É–º–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ —è–∑—ã–∫–∞ –ø–æ —Å–ª–æ–≤–∞–º. 
–î–∞–≤–∞–π –≤–º–µ—Å—Ç–µ —É–ª—É—á—à–∞—Ç—å —Å–≤–æ–π —Å–ª–æ–≤–∞—Ä–Ω—ã–π –∑–∞–ø–∞—Å –∏ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –Ω–æ–≤—ã—Ö –≤—ã—Å–æ—Ç –≤ –∏–∑—É—á–µ–Ω–∏–∏ –∏–Ω–æ—Å—Ç—Ä–∞–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞! 
–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å? üòâüìö''')
            self.send_message_with_buttons(message, text)

    def send_message_with_buttons(self, message, text):
        """
        –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π, —Å–æ–¥–µ—Ä–∂–∞—â–µ–π —Ä–∞–∑–ª–∏—á–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã.

        :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
        :param text: –¢–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤–º–µ—Å—Ç–µ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π.
        """
        keyboard = ReplyKeyboardMarkup(resize_keyboard=True)
        keyboard.add('–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üéÆ')
        keyboard.add('–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤ üíº')
        keyboard.add('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ ‚ûï')
        keyboard.add('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå')
        self.bot.send_message(message.chat.id, text, reply_markup=keyboard)


class StartGame(StartBot):
    """
    –ö–ª–∞—Å—Å StartGame –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã –ø–µ—Ä–µ–≤–æ–¥–∞ —Å–ª–æ–≤.

    """
    def __init__(self, token):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∞—Å—Å–∞ StartGame —Ç–æ–∫–µ–Ω–æ–º.

        :param token: –¢–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞.
        """
        super().__init__(token)

        @self.bot.message_handler(func=lambda message: message.text == '–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É üéÆ')
        def start_game(message):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—á–∞–ª–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏.

            –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É "–ù–∞—á–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É" –∏ –Ω–∞—á–∏–Ω–∞–µ—Ç –∏–≥—Ä—É –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

            :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            """
            user_id = message.from_user.id
            used_questions = db.fetch_all('''SELECT DISTINCT question_id FROM used_questions''')
            if len(used_questions) >= 10:
                common_words(message, user_id)
            query = db.fetch_one(
                '''SELECT question_id,  question_text 
                          FROM questions 
                          WHERE user_id = %s OR user_id IS NULL
                          ORDER BY RANDOM()''',
                (user_id,))
            if query:
                question_text = query[1]
                question_id = query[0]
                while question_id in [q[0] for q in used_questions]:
                    query = db.fetch_one(
                        '''SELECT question_id, question_text 
                                  FROM questions 
                                  WHERE user_id = %s OR user_id IS NULL
                                  ORDER BY RANDOM()''',
                        (user_id,))
                    if query:
                        question_text = query[1]
                        question_id = query[0]

                db.execute_query(
                    '''INSERT INTO used_questions (question_id, user_id) 
                              VALUES (%s, %s)''',
                    (question_id, user_id)
                )

                all_answers(user_id, question_text, question_id)

        def all_answers(user_id, question_text, question_id):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞.

            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞ –Ω–∞ —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å.

            :param user_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            :param question_text: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.
            :param question_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞.
            """
            answers = db.fetch_all(
                '''SELECT answer_text
                          FROM answers 
                          WHERE question_id = %s''',
                (question_id,)
            )

            random.shuffle(answers)
            send_results_with_buttons(user_id, answers, question_text, question_id)

        def send_results_with_buttons(user_id, answers, question_text, question_id):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å –∫–Ω–æ–ø–∫–∞–º–∏.

            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–∞—Ä–∏–∞–Ω—Ç–∞–º–∏ –æ—Ç–≤–µ—Ç–∞ –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫.

            :param user_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            :param answers: –í–∞—Ä–∏–∞–Ω—Ç—ã –æ—Ç–≤–µ—Ç–∞.
            :param question_text: –¢–µ–∫—Å—Ç –≤–æ–ø—Ä–æ—Å–∞.
            :param question_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –≤–æ–ø—Ä–æ—Å–∞.
            """
            markup = InlineKeyboardMarkup(row_width=1)
            for answer in answers:
                answer_text = answer[0]
                btn = InlineKeyboardButton(text=answer_text, callback_data=f'answer_{answer_text}_{question_id}')
                markup.add(btn)
            reply = f'''‚è≥ <b>–ö–∞–∫ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—Å—è —Å–ª–æ–≤–æ:</b>
                             \n\n{question_text}\n\n–ï—Å–ª–∏ —Å–æ–º–Ω–µ–Ω–∏–π –Ω–µ—Ç - –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É: üì®'''
            self.bot.send_message(user_id, reply, reply_markup=markup, parse_mode='HTML')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('answer'))
        def check_answer(call):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –æ—Ç–≤–µ—Ç–∞.

            –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.

            :param call: –í—ã–∑–æ–≤ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞.
            """
            user_id = call.message.chat.id
            chosen_answer = call.data.split('_')[1]
            question_id = call.data.split('_')[2]
            correct_answer = db.fetch_one(
                '''SELECT answer_text 
                          FROM answers 
                          WHERE question_id = %s 
                          AND answer_text = %s 
                          AND is_correct = true 
                          AND (user_id = %s OR user_id IS NULL)''',
                (question_id, chosen_answer, user_id,))
            if correct_answer:
                self.bot.send_message(call.message.chat.id, text='<b>–û—Ç–≤–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–æ–∑–¥—Ä–∞–≤–ª—è—é!</b>',
                                      parse_mode='HTML')
                start_game(call)
                self.bot.delete_message(call.message.chat.id, call.message.message_id)
            else:
                self.bot.send_message(call.message.chat.id, text='<b>–û—Ç–≤–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.</b>',
                                      parse_mode='HTML')

        def common_words(message, user_id):
            """
            –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–±—Ä–æ—Å–∞ —Å–ø–∏—Å–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤.

            –°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, —á—Ç–æ–±—ã –æ–Ω –º–æ–≥ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—É—é –∏–≥—Ä—É.

            :param message: –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
            :param user_id: –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            """
            db.execute_query(
                '''DELETE FROM used_questions 
                   WHERE user_id = %s''',
                (user_id,)
            )
            start_game(message)


class ListWords(StartBot):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤.

    ...

    –ê—Ç—Ä–∏–±—É—Ç—ã
    ----------
    token: str
    —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    –ú–µ—Ç–æ–¥—ã
    -------
    init(token)
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç ListWords —Å —Ç–æ–∫–µ–Ω–æ–º.
    list_words(message)
    –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    def __init__(self, token):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç ListWords –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        token (str): —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        """
        super().__init__(token)

        @self.bot.message_handler(func=lambda message: message.text == '–ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤ üíº')
        def list_words(message):
            """
            –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message : Message
            –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
            """
            chat_id = message.chat.id
            query = db.fetch_all('''SELECT DISTINCT q.question_text 
                                           FROM questions q 
                                           WHERE user_id = %s OR user_id IS NULL;''',
                                 (chat_id,))

            if query:
                words = [row[0] for row in query]
                wordslist = '\n'.join([f"{i}. {word}" for i, word in enumerate(words, start=1)])
                reply = f'<b>–°–ø–∏—Å–æ–∫ –∏–∑—É—á–∞–µ–º—ã—Ö —Å–ª–æ–≤:</b> ü™ß\n\n{wordslist}'
                self.bot.send_message(chat_id, reply, parse_mode='HTML')
            else:
                reply = '<b>–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.</b>'
                self.bot.send_message(chat_id, reply, parse_mode='HTML')


class AddWord(StartBot):
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞.

    ...

    –ê—Ç—Ä–∏–±—É—Ç—ã
    ----------
    token: str
    —Ç–æ–∫–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã–π –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏

    –ú–µ—Ç–æ–¥—ã
    -------
    init(token)
    –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç AddWord —Å —Ç–æ–∫–µ–Ω–æ–º.
    send_message_for_add_word(message)
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.
    add_word(message)
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.
    add_wrong_answer(message, add_word, translated_text_eng)
    –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.
    """
    def __init__(self, token):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–±—ä–µ–∫—Ç AddWord –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        token (str): —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–æ–∫–µ–Ω –¥–ª—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏.
        """
        super().__init__(token)

        @self.bot.message_handler(func=lambda message: message.text == '–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ ‚ûï')
        def send_message_for_add_word(message):
            """
            –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.

            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message : Message
            –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
            """
            reply = '–ù–∞–ø–∏—à–∏—Ç–µ –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ:'
            self.bot.send_message(message.from_user.id, reply)
            self.bot.register_next_step_handler(message, self.add_word)

    def add_word(self, message):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message : Message
        –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
        """
        chat_id = message.from_user.id
        add_word = message.text
        translated_text_eng = translate_text_rus_to_eng(add_word)
        question_exists = db.fetch_one(
            '''SELECT question_text
                      FROM questions 
                      WHERE question_text = %s 
                      AND (user_id = %s OR user_id IS NULL)''',
            (add_word, chat_id,))
        if not question_exists:
            db.execute_query('''INSERT INTO questions (question_text, user_id) 
                                       VALUES (%s, %s);''',
                             (add_word, chat_id,))
            self.add_wrong_answer(message, add_word, translated_text_eng)
        else:
            reply = '<b>–¢–∞–∫–æ–µ —Å–ª–æ–≤–æ —É–∂–µ –µ—Å—Ç—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–æ–µ —Å–ª–æ–≤–æ.</b>'
            self.bot.send_message(message.from_user.id, reply, parse_mode='HTML')

    def add_wrong_answer(self, message, add_word, translated_text_eng):
        """
        –î–æ–±–∞–≤–ª—è–µ—Ç –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –¥–ª—è –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        message : Message
        –û–±—ä–µ–∫—Ç —Å–æ–æ–±—â–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–π –≤—ã–∑–≤–∞–ª –≤—ã–∑–æ–≤ —Ñ—É–Ω–∫—Ü–∏–∏.
        add_word: str
        –ù–æ–≤–æ–µ —Å–ª–æ–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è.
        translated_text_eng: str
        –ü–µ—Ä–µ–≤–µ–¥–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–æ–≤–æ–≥–æ —Å–ª–æ–≤–∞ –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫.
        """
        chat_id = message.from_user.id
        question_id = db.fetch_one('''SELECT question_id 
                                             FROM questions 
                                             WHERE question_text = %s 
                                             AND (user_id = %s OR user_id IS NULL);''',
                                   (add_word, chat_id))[0]

        bad_words = db.fetch_all('''SELECT words_text FROM words ORDER BY RANDOM() LIMIT 3''')

        bad_words.append(translated_text_eng)

        for wrong_word in bad_words:
            is_correct = wrong_word == translated_text_eng
            db.execute_query(
                '''INSERT INTO answers (question_id, answer_text, is_correct, user_id) 
                          VALUES (%s, %s, %s, %s);''',
                (question_id, wrong_word, is_correct, chat_id,)
            )

        reply = '<b>–ù–æ–≤–æ–µ —Å–ª–æ–≤–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.</b>'
        self.bot.send_message(message.from_user.id, reply, parse_mode='HTML')
        photo = open('2.jpeg', 'rb')
        self.bot.send_photo(message.chat.id, photo)


class DeleteWord(StartBot):
    """
    –ö–ª–∞—Å—Å DeleteWord –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
    """
    def __init__(self, token):
        """
        –ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –¥–ª—è –∫–ª–∞—Å—Å–∞ DeleteWord.

        –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
        token (str): –¢–æ–∫–µ–Ω API Telegram.
        """
        super().__init__(token)

        @self.bot.message_handler(func=lambda message: message.text == '–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ ‚ùå')
        def delete_word(message):
            """
            –§—É–Ω–∫—Ü–∏—è-–æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å–ª–æ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–≤–æ–¥–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            message (Telegram message): –í—Ö–æ–¥–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
            """
            user_id = message.from_user.id
            query = db.fetch_all('''SELECT DISTINCT q.question_text 
                                           FROM questions q
                                           WHERE user_id = %s;''', (user_id,))
            if query:
                words = [row[0] for row in query]
                markup = InlineKeyboardMarkup()
                for word in words:
                    btn = InlineKeyboardButton(text=word, callback_data=f'delete_{word}')
                    markup.add(btn)
                reply = f'<b>–í—ã–±–µ—Ä–∏—Ç–µ —Å–ª–æ–≤–æ, —á—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å:</b> üóë'
                self.bot.send_message(message.from_user.id, reply, reply_markup=markup, parse_mode='HTML')
            else:
                reply = '<b>–í –Ω–∞—Å—Ç–æ—è—â–∏–π –º–æ–º–µ–Ω—Ç —É –≤–∞—Å –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö —Å–ª–æ–≤.</b>'
                self.bot.send_message(message.from_user.id, reply, parse_mode='HTML')

        @self.bot.callback_query_handler(func=lambda call: call.data.startswith('delete'))
        def delete_word(call):
            """
            –§—É–Ω–∫—Ü–∏—è –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.

            –ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
            call (Telegram callback): –î–∞–Ω–Ω—ã–µ –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Å–ª–æ–≤–∞.
            """
            user_id = call.from_user.id
            word_id = call.data.split('_')[1]
            db.execute_query('''DELETE
                                FROM
                                answers
                                WHERE
                                question_id
                                IN
                                (SELECT question_id
                                FROM questions
                                WHERE question_text ILIKE '%{}%' AND user_id = '{}')'''.format(word_id, user_id))

            db.execute_query('''DELETE
                                FROM
                                questions
                                WHERE
                                question_id
                                IN
                                (SELECT question_id
                                FROM questions
                                WHERE question_text ILIKE '%{}%' AND user_id = '{}')'''.format(word_id, user_id))

            self.bot.send_message(user_id, '<b>–í—ã–±—Ä–∞–Ω–Ω–æ–µ —Å–ª–æ–≤–æ —É–¥–∞–ª–µ–Ω–æ!</b>', parse_mode='HTML')
            self.bot.delete_message(call.message.chat.id, call.message.message_id)


class BotRunner(ListWords, DeleteWord, AddWord, StartGame, StartBot):
    """
    –≠—Ç–æ—Ç –∫–ª–∞—Å—Å –æ—Ç–≤–µ—á–∞–µ—Ç –∑–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π, —Ç–∞–∫–∏—Ö –∫–∞–∫:
    * –≤—ã–≤–æ–¥ —Å–ø–∏—Å–∫–∞ —Å–ª–æ–≤
    * —É–¥–∞–ª–µ–Ω–∏–µ —Å–ª–æ–≤
    * –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤
    * –Ω–∞—á–∞–ª–æ –∏–≥—Ä—ã
    * –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
    """
    def __init__(self, token):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–±—ä–µ–∫—Ç–∞ BotRunner —É–∫–∞–∑–∞–Ω–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º.

        :param token: –¢–æ–∫–µ–Ω –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É.
        """
        super().__init__(token)

    def run(self):
        """
        –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã.

        –≠—Ç–æ—Ç –º–µ—Ç–æ–¥ –æ–ø—Ä–∞—à–∏–≤–∞–µ—Ç –±–æ—Ç–∞ –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –ª—é–±—ã–µ –∏—Å–∫–ª—é—á–µ–Ω–∏—è, –≤–æ–∑–Ω–∏–∫—à–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –æ–ø—Ä–æ—Å–∞.
        """
        while True:
            try:
                self.bot.polling(none_stop=True)
            except Exception as e:
                print(f'–û—à–∏–±–∫–∞: {e}')
                continue


bot = BotRunner(token)
bot.run()
